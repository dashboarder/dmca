#!/bin/sh
#
# Make queries against the embedded device map database
#
# embedded_device_map <target> <property>
#
#  Returns the value of <property> for the unique device <target>.
#
# embedded_device_map -query <sql statement>
#
#  Runs <sql statement> against the device map database.
#

DBPATH=
QUERY=

function fail() {
    echo ""
    echo $1
    echo ""
    echo "usage: embedded_device_map [-db <path>] <target> <property>"
    echo "       embedded_device_map [-db <path>] [<sqlite options>] -query <SQL>"
    echo "       embedded_device_map [-db <path>] [<sqlite options>] -listfiles <target>"
    echo "       embedded_device_map [-db <path>] -schema"
    echo ""
    echo "The default query used when -query and -listfiles are not specified is"
    echo "  SELECT <property> FROM Targets WHERE Target=='<target>'"
    echo "This query is compatible with previous versions of the tool."
    echo ""
    echo "The sqlite options -column, -header, -html, -line, -list, -separator and"
    echo "-nullvalue are supported as documented in the SQLITE3(1) manpage."
    echo ""
    echo "The -schema option causes the database schema to be printed."
    echo ""
    exit 1
}

#
# Parse options.
#
SQLOPTIONS="-noheader"
DO_SCHEMA=
while true; do

    case $1 in
	-query )
	    shift
	    QUERY=$*
	    break
	    ;;
	-listfiles )
	    shift
	    QUERY="SELECT DISTINCT Project,Path FROM Manifests INNER JOIN Files ON Files.manifestID == Manifests.manifestID WHERE Target == '$1' ORDER BY Project, Path"
	    break
	    ;;
	-db )
	    shift
	    DBPATH=$1
	    shift
	    ;;
	-printdb )
	    PRINTDB=YES
	    break
	    shift
	    ;;
	-schema )
	    # from the sqlite docs, equivalent to the .schema command
	    QUERY="SELECT sql FROM (SELECT * FROM sqlite_master UNION ALL SELECT * FROM sqlite_temp_master) WHERE type!='meta' ORDER BY tbl_name, type DESC, name"
	    SQLOPTIONS+=" -list"
	    break
	    ;;
	-help )
	    fail "Query tool for the EmbeddedDeviceMap database"
	    ;;
	-column | -header | -html | -line | -list )
	    SQLOPTIONS+=" $1"
	    shift
	    ;;
	-separator )
	    shift
	    SQLOPTIONS+=" -separator $1"
	    shift
	    ;;
	-nullvalue )
	    shift
	    SQLOPTIONS+=" -nullvalue $1"
	    shift
	    ;;
	-* )
	    fail "ERROR: option '$1' not recognised"
	    ;;
	* )
	    # assume an old-style query
	    if [ $# != 2 ]; then
		fail "ERROR: string '$*' does not look like an old-style query"
	    fi
	    # default query syntax is <target> <property>, translate to SQL
	    QUERY="SELECT $2 FROM Targets WHERE Target == '$1';"
	    break
	    ;;
    esac
done

#
# Locate database
#
if [ -z "${DBPATH}" ]; then
    if [ -z "${PLATFORM_PATH}" ]; then
	if [ ! -z "${SDKROOT}" ]; then
	    SDK=${SDKROOT}
	else 
	    SDK="iphoneos.internal"
	fi
	# PLATFORM_PATH=`xcodebuild -version -sdk $SDK PlatformPath`
    fi
    DBPATH="`dirname $0`/device_map.db"
fi
if [ ! -r "${DBPATH}" ]; then
    fail "ERROR: database \"${DBPATH}\" not readable"
fi

# print the database path if requested - but only if it's readable
if [ ! -z "${PRINTDB}" ]; then
    echo ${DBPATH}
    exit
fi

#
# Run the query
#
#ecop "OPTIONS: ${SQLOPTIONS}"
#echo "DBPATH:  ${DBPATH}"
#echo "QUERY:   ${QUERY}"

sqlite3 ${SQLOPTIONS} ${DBPATH} "${QUERY}"
